//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ChocoDemo
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ChocoDemo.ChocoDemo_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_RadDataGrid() { return new global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid(); }

        private object Activate_4_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>(); }

        private object Activate_5_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>(); }

        private object Activate_15_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>(); }

        private object Activate_16_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>(); }

        private object Activate_20_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>(); }

        private object Activate_21_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>(); }

        private object Activate_23_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>(); }

        private object Activate_24_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>(); }

        private object Activate_32_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }

        private object Activate_33_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }

        private object Activate_40_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>(); }

        private object Activate_41_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>(); }

        private object Activate_47_DataGridDragBehavior() { return new global::Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior(); }

        private object Activate_48_ProductsPage() { return new global::ChocoDemo.ProductsPage(); }

        private object Activate_49_NewOrderPage() { return new global::ChocoDemo.NewOrderPage(); }

        private object Activate_50_MainPage() { return new global::ChocoDemo.MainPage(); }

        private void VectorAdd_2_SortDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_3_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_4_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_5_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_13_GroupDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_14_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_15_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_16_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_18_FilterDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_19_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_20_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_21_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_23_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)item;
            collection.Add(newItem);
        }

        private void VectorAdd_24_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)item;
            collection.Add(newItem);
        }

        private void VectorAdd_32_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private void VectorAdd_33_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private void VectorAdd_38_CommandCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand)item;
            collection.Add(newItem);
        }

        private void VectorAdd_39_AttachableObjectCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand)item;
            collection.Add(newItem);
        }

        private void VectorAdd_40_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand)item;
            collection.Add(newItem);
        }

        private void VectorAdd_41_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Object":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Windows.UI.Xaml.Controls.StyleSelector":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.StyleSelector));
                break;

            case "Boolean":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Double":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Int32":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.Controls.DataTemplateSelector":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector));
                break;

            case "String":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.Activator = Activate_0_RadDataGrid;
                userType.AddMemberName("ItemsSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SortDescriptors");
                userType.AddMemberName("GroupDescriptors");
                userType.AddMemberName("FilterDescriptors");
                userType.AddMemberName("Columns");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>");
                userType.AddMemberName("AutoGenerateColumns");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("RowBackground");
                userType.AddMemberName("AlternateRowBackground");
                userType.AddMemberName("AlternationStep");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AlternationStartIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("GridLinesBrush");
                userType.AddMemberName("GridLinesVisibility");
                userType.AddMemberName("GridLinesThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("SelectionUnit");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedItems");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Object>");
                userType.AddMemberName("UserColumnReorderMode");
                userType.AddMemberName("UserSortMode");
                userType.AddMemberName("UserGroupMode");
                userType.AddMemberName("IndentWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GroupHeaderDisplayMode");
                userType.AddMemberName("GroupHeaderTemplate");
                userType.AddMemberName("GroupHeaderTemplateSelector");
                userType.AddMemberName("GroupHeaderStyle");
                userType.AddMemberName("GroupHeaderStyleSelector");
                userType.AddMemberName("Commands");
                userType.AddMemberName("RowHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CommandService");
                userType.AddMemberName("DragBehavior");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadControl":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_2_SortDescriptorCollection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>),
                                                   "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>");
                userType.CollectionAdd = VectorAdd_3_DataDescriptorCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>");
                userType.Activator = Activate_4_ObservableCollection;
                userType.CollectionAdd = VectorAdd_4_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>");
                userType.Activator = Activate_5_Collection;
                userType.CollectionAdd = VectorAdd_5_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptor"));
                userType.AddMemberName("SortOrder");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataDescriptor":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptor), GetXamlTypeByName("Telerik.Core.ViewModelBase"));
                xamlType = userType;
                break;

            case "Telerik.Core.ViewModelBase":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Core.ViewModelBase), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Telerik.Data.Core.SortOrder":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Data.Core.SortOrder), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ascending", global::Telerik.Data.Core.SortOrder.Ascending);
                userType.AddEnumValue("Descending", global::Telerik.Data.Core.SortOrder.Descending);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_13_GroupDescriptorCollection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>),
                                                   "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>");
                userType.CollectionAdd = VectorAdd_14_DataDescriptorCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>");
                userType.Activator = Activate_15_ObservableCollection;
                userType.CollectionAdd = VectorAdd_15_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>");
                userType.Activator = Activate_16_Collection;
                userType.CollectionAdd = VectorAdd_16_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor"));
                userType.AddMemberName("DisplayContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_18_FilterDescriptorCollection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>),
                                                   "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>");
                userType.CollectionAdd = VectorAdd_19_DataDescriptorCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>");
                userType.Activator = Activate_20_ObservableCollection;
                userType.CollectionAdd = VectorAdd_20_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>");
                userType.Activator = Activate_21_Collection;
                userType.CollectionAdd = VectorAdd_21_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptor"));
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>");
                userType.Activator = Activate_23_ObservableCollection;
                userType.CollectionAdd = VectorAdd_23_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>");
                userType.Activator = Activate_24_Collection;
                userType.CollectionAdd = VectorAdd_24_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("CellDecorationStyle");
                userType.AddMemberName("CellDecorationStyleSelector");
                userType.AddMemberName("CanUserReorder");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanUserGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("SizeMode");
                userType.AddMemberName("Width");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ActualWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("IsAutoGenerated");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SortDirection");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Stretch", global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode.Stretch);
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode.Auto);
                userType.AddEnumValue("Fixed", global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode.Fixed);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.SortDirection":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.SortDirection), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.SortDirection.None);
                userType.AddEnumValue("Ascending", global::Telerik.UI.Xaml.Controls.Grid.SortDirection.Ascending);
                userType.AddEnumValue("Descending", global::Telerik.UI.Xaml.Controls.Grid.SortDirection.Descending);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility.None);
                userType.AddEnumValue("Horizontal", global::Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility.Horizontal);
                userType.AddEnumValue("Vertical", global::Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility.Vertical);
                userType.AddEnumValue("Both", global::Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility.Both);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Row", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit.Row);
                userType.AddEnumValue("Cell", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit.Cell);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode.None);
                userType.AddEnumValue("Single", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode.Single);
                userType.AddEnumValue("Multiple", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode.Multiple);
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Object>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Object>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Object>");
                userType.Activator = Activate_32_ObservableCollection;
                userType.CollectionAdd = VectorAdd_32_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Object>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>),
                                                   "System.Collections.ObjectModel.Collection<Object>");
                userType.Activator = Activate_33_Collection;
                userType.CollectionAdd = VectorAdd_33_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Interactive", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode.Interactive);
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode.None);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.Auto);
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.None);
                userType.AddEnumValue("Single", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.Single);
                userType.AddEnumValue("Multiple", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.Multiple);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode.Auto);
                userType.AddEnumValue("Enabled", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode.Enabled);
                userType.AddEnumValue("Disabled", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode.Disabled);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Frozen", global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode.Frozen);
                userType.AddEnumValue("Scrollable", global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode.Scrollable);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.Commands.CommandCollection":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandCollection), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>"));
                userType.CollectionAdd = VectorAdd_38_CommandCollection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid, global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid, global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>),
                                                   "Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>");
                userType.CollectionAdd = VectorAdd_39_AttachableObjectCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>");
                userType.Activator = Activate_40_ObservableCollection;
                userType.CollectionAdd = VectorAdd_40_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand>");
                userType.Activator = Activate_41_Collection;
                userType.CollectionAdd = VectorAdd_41_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                userType.AddMemberName("Id");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>),
                                                   "Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>");
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.Commands.CommandId":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.Unknown);
                userType.AddEnumValue("ColumnHeaderTap", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.ColumnHeaderTap);
                userType.AddEnumValue("GroupHeaderTap", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.GroupHeaderTap);
                userType.AddEnumValue("CellTap", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.CellTap);
                userType.AddEnumValue("CellDoubleTap", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.CellDoubleTap);
                userType.AddEnumValue("FlyoutGroupHeaderTap", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.FlyoutGroupHeaderTap);
                userType.AddEnumValue("CellPointerOver", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.CellPointerOver);
                userType.AddEnumValue("GenerateColumn", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.GenerateColumn);
                userType.AddEnumValue("DataBindingComplete", global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId.DataBindingComplete);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.Commands.CommandService":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandService), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridService"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridService":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridService), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                userType.Activator = Activate_47_DataGridDragBehavior;
                xamlType = userType;
                break;

            case "ChocoDemo.ProductsPage":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ChocoDemo.ProductsPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_ProductsPage;
                xamlType = userType;
                break;

            case "ChocoDemo.NewOrderPage":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ChocoDemo.NewOrderPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_NewOrderPage;
                xamlType = userType;
                break;

            case "ChocoDemo.MainPage":
                userType = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ChocoDemo.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_50_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Telerik.UI.Xaml.Controls.Grid.Grid_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_RadDataGrid_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.ItemsSource;
        }
        private void set_0_RadDataGrid_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_1_RadDataGrid_SortDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SortDescriptors;
        }
        private object get_2_OrderedDescriptor_SortOrder(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor)instance;
            return that.SortOrder;
        }
        private void set_2_OrderedDescriptor_SortOrder(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor)instance;
            that.SortOrder = (global::Telerik.Data.Core.SortOrder)Value;
        }
        private object get_3_RadDataGrid_GroupDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupDescriptors;
        }
        private object get_4_GroupDescriptorBase_DisplayContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)instance;
            return that.DisplayContent;
        }
        private void set_4_GroupDescriptorBase_DisplayContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)instance;
            that.DisplayContent = (global::System.Object)Value;
        }
        private object get_5_RadDataGrid_FilterDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.FilterDescriptors;
        }
        private object get_6_RadDataGrid_Columns(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.Columns;
        }
        private object get_7_DataGridColumn_CellDecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CellDecorationStyle;
        }
        private void set_7_DataGridColumn_CellDecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CellDecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_8_DataGridColumn_CellDecorationStyleSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CellDecorationStyleSelector;
        }
        private void set_8_DataGridColumn_CellDecorationStyleSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CellDecorationStyleSelector = (global::Windows.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_9_DataGridColumn_CanUserReorder(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserReorder;
        }
        private void set_9_DataGridColumn_CanUserReorder(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserReorder = (global::System.Boolean)Value;
        }
        private object get_10_DataGridColumn_CanUserGroup(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserGroup;
        }
        private void set_10_DataGridColumn_CanUserGroup(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserGroup = (global::System.Boolean)Value;
        }
        private object get_11_DataGridColumn_HeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.HeaderStyle;
        }
        private void set_11_DataGridColumn_HeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.HeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_12_DataGridColumn_SizeMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.SizeMode;
        }
        private void set_12_DataGridColumn_SizeMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.SizeMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode)Value;
        }
        private object get_13_DataGridColumn_Width(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.Width;
        }
        private void set_13_DataGridColumn_Width(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_14_DataGridColumn_ActualWidth(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.ActualWidth;
        }
        private object get_15_DataGridColumn_IsAutoGenerated(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.IsAutoGenerated;
        }
        private object get_16_DataGridColumn_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.Header;
        }
        private void set_16_DataGridColumn_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_17_DataGridColumn_SortDirection(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.SortDirection;
        }
        private void set_17_DataGridColumn_SortDirection(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.SortDirection = (global::Telerik.UI.Xaml.Controls.Grid.SortDirection)Value;
        }
        private object get_18_RadDataGrid_AutoGenerateColumns(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AutoGenerateColumns;
        }
        private void set_18_RadDataGrid_AutoGenerateColumns(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AutoGenerateColumns = (global::System.Boolean)Value;
        }
        private object get_19_RadDataGrid_RowBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.RowBackground;
        }
        private void set_19_RadDataGrid_RowBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.RowBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_20_RadDataGrid_AlternateRowBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AlternateRowBackground;
        }
        private void set_20_RadDataGrid_AlternateRowBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AlternateRowBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_21_RadDataGrid_AlternationStep(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AlternationStep;
        }
        private void set_21_RadDataGrid_AlternationStep(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AlternationStep = (global::System.Int32)Value;
        }
        private object get_22_RadDataGrid_AlternationStartIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AlternationStartIndex;
        }
        private void set_22_RadDataGrid_AlternationStartIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AlternationStartIndex = (global::System.Int32)Value;
        }
        private object get_23_RadDataGrid_GridLinesBrush(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GridLinesBrush;
        }
        private void set_23_RadDataGrid_GridLinesBrush(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GridLinesBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_24_RadDataGrid_GridLinesVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GridLinesVisibility;
        }
        private void set_24_RadDataGrid_GridLinesVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GridLinesVisibility = (global::Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility)Value;
        }
        private object get_25_RadDataGrid_GridLinesThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GridLinesThickness;
        }
        private void set_25_RadDataGrid_GridLinesThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GridLinesThickness = (global::System.Double)Value;
        }
        private object get_26_RadDataGrid_SelectionUnit(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectionUnit;
        }
        private void set_26_RadDataGrid_SelectionUnit(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.SelectionUnit = (global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit)Value;
        }
        private object get_27_RadDataGrid_SelectedItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectedItem;
        }
        private void set_27_RadDataGrid_SelectedItem(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_28_RadDataGrid_SelectionMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectionMode;
        }
        private void set_28_RadDataGrid_SelectionMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.SelectionMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode)Value;
        }
        private object get_29_RadDataGrid_SelectedItems(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectedItems;
        }
        private object get_30_RadDataGrid_UserColumnReorderMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserColumnReorderMode;
        }
        private void set_30_RadDataGrid_UserColumnReorderMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserColumnReorderMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode)Value;
        }
        private object get_31_RadDataGrid_UserSortMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserSortMode;
        }
        private void set_31_RadDataGrid_UserSortMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserSortMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode)Value;
        }
        private object get_32_RadDataGrid_UserGroupMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserGroupMode;
        }
        private void set_32_RadDataGrid_UserGroupMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserGroupMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode)Value;
        }
        private object get_33_RadDataGrid_IndentWidth(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.IndentWidth;
        }
        private void set_33_RadDataGrid_IndentWidth(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.IndentWidth = (global::System.Double)Value;
        }
        private object get_34_RadDataGrid_GroupHeaderDisplayMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderDisplayMode;
        }
        private void set_34_RadDataGrid_GroupHeaderDisplayMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderDisplayMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode)Value;
        }
        private object get_35_RadDataGrid_GroupHeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderTemplate;
        }
        private void set_35_RadDataGrid_GroupHeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_36_RadDataGrid_GroupHeaderTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderTemplateSelector;
        }
        private void set_36_RadDataGrid_GroupHeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_37_RadDataGrid_GroupHeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderStyle;
        }
        private void set_37_RadDataGrid_GroupHeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_38_RadDataGrid_GroupHeaderStyleSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderStyleSelector;
        }
        private void set_38_RadDataGrid_GroupHeaderStyleSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderStyleSelector = (global::Windows.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_39_RadDataGrid_Commands(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.Commands;
        }
        private object get_40_DataGridCommand_Id(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand)instance;
            return that.Id;
        }
        private void set_40_DataGridCommand_Id(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand)instance;
            that.Id = (global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandId)Value;
        }
        private object get_41_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>)instance;
            return that.Owner;
        }
        private object get_42_RadDataGrid_RowHeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.RowHeight;
        }
        private void set_42_RadDataGrid_RowHeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.RowHeight = (global::System.Double)Value;
        }
        private object get_43_RadDataGrid_CommandService(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.CommandService;
        }
        private object get_44_RadDataGrid_DragBehavior(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.DragBehavior;
        }
        private void set_44_RadDataGrid_DragBehavior(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.DragBehavior = (global::Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior)Value;
        }
        private object get_45_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember xamlMember = null;
            global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.ItemsSource":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_RadDataGrid_ItemsSource;
                xamlMember.Setter = set_0_RadDataGrid_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SortDescriptors":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SortDescriptors", "Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection");
                xamlMember.Getter = get_1_RadDataGrid_SortDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor.SortOrder":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SortOrder", "Telerik.Data.Core.SortOrder");
                xamlMember.Getter = get_2_OrderedDescriptor_SortOrder;
                xamlMember.Setter = set_2_OrderedDescriptor_SortOrder;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupDescriptors":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GroupDescriptors", "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection");
                xamlMember.Getter = get_3_RadDataGrid_GroupDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase.DisplayContent":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "DisplayContent", "Object");
                xamlMember.Getter = get_4_GroupDescriptorBase_DisplayContent;
                xamlMember.Setter = set_4_GroupDescriptorBase_DisplayContent;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.FilterDescriptors":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "FilterDescriptors", "Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection");
                xamlMember.Getter = get_5_RadDataGrid_FilterDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.Columns":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "Columns", "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>");
                xamlMember.Getter = get_6_RadDataGrid_Columns;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CellDecorationStyle":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "CellDecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_DataGridColumn_CellDecorationStyle;
                xamlMember.Setter = set_7_DataGridColumn_CellDecorationStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CellDecorationStyleSelector":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "CellDecorationStyleSelector", "Windows.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_DataGridColumn_CellDecorationStyleSelector;
                xamlMember.Setter = set_8_DataGridColumn_CellDecorationStyleSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserReorder":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "CanUserReorder", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DataGridColumn_CanUserReorder;
                xamlMember.Setter = set_9_DataGridColumn_CanUserReorder;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserGroup":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "CanUserGroup", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DataGridColumn_CanUserGroup;
                xamlMember.Setter = set_10_DataGridColumn_CanUserGroup;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.HeaderStyle":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DataGridColumn_HeaderStyle;
                xamlMember.Setter = set_11_DataGridColumn_HeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.SizeMode":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SizeMode", "Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_DataGridColumn_SizeMode;
                xamlMember.Setter = set_12_DataGridColumn_SizeMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.Width":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_DataGridColumn_Width;
                xamlMember.Setter = set_13_DataGridColumn_Width;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.ActualWidth":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "ActualWidth", "Double");
                xamlMember.Getter = get_14_DataGridColumn_ActualWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.IsAutoGenerated":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "IsAutoGenerated", "Boolean");
                xamlMember.Getter = get_15_DataGridColumn_IsAutoGenerated;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.Header":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_DataGridColumn_Header;
                xamlMember.Setter = set_16_DataGridColumn_Header;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.SortDirection":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SortDirection", "Telerik.UI.Xaml.Controls.Grid.SortDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DataGridColumn_SortDirection;
                xamlMember.Setter = set_17_DataGridColumn_SortDirection;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AutoGenerateColumns":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "AutoGenerateColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_RadDataGrid_AutoGenerateColumns;
                xamlMember.Setter = set_18_RadDataGrid_AutoGenerateColumns;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.RowBackground":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "RowBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_RadDataGrid_RowBackground;
                xamlMember.Setter = set_19_RadDataGrid_RowBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AlternateRowBackground":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "AlternateRowBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_RadDataGrid_AlternateRowBackground;
                xamlMember.Setter = set_20_RadDataGrid_AlternateRowBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AlternationStep":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "AlternationStep", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_RadDataGrid_AlternationStep;
                xamlMember.Setter = set_21_RadDataGrid_AlternationStep;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AlternationStartIndex":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "AlternationStartIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_RadDataGrid_AlternationStartIndex;
                xamlMember.Setter = set_22_RadDataGrid_AlternationStartIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GridLinesBrush":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GridLinesBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_RadDataGrid_GridLinesBrush;
                xamlMember.Setter = set_23_RadDataGrid_GridLinesBrush;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GridLinesVisibility":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GridLinesVisibility", "Telerik.UI.Xaml.Controls.Grid.GridLinesVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_RadDataGrid_GridLinesVisibility;
                xamlMember.Setter = set_24_RadDataGrid_GridLinesVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GridLinesThickness":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GridLinesThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_RadDataGrid_GridLinesThickness;
                xamlMember.Setter = set_25_RadDataGrid_GridLinesThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectionUnit":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SelectionUnit", "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_RadDataGrid_SelectionUnit;
                xamlMember.Setter = set_26_RadDataGrid_SelectionUnit;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectedItem":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_RadDataGrid_SelectedItem;
                xamlMember.Setter = set_27_RadDataGrid_SelectedItem;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectionMode":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SelectionMode", "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_RadDataGrid_SelectionMode;
                xamlMember.Setter = set_28_RadDataGrid_SelectionMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectedItems":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.ObjectModel.ObservableCollection<Object>");
                xamlMember.Getter = get_29_RadDataGrid_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserColumnReorderMode":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "UserColumnReorderMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_RadDataGrid_UserColumnReorderMode;
                xamlMember.Setter = set_30_RadDataGrid_UserColumnReorderMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserSortMode":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "UserSortMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_RadDataGrid_UserSortMode;
                xamlMember.Setter = set_31_RadDataGrid_UserSortMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserGroupMode":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "UserGroupMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_RadDataGrid_UserGroupMode;
                xamlMember.Setter = set_32_RadDataGrid_UserGroupMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.IndentWidth":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "IndentWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_RadDataGrid_IndentWidth;
                xamlMember.Setter = set_33_RadDataGrid_IndentWidth;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderDisplayMode":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GroupHeaderDisplayMode", "Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_RadDataGrid_GroupHeaderDisplayMode;
                xamlMember.Setter = set_34_RadDataGrid_GroupHeaderDisplayMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderTemplate":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GroupHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_RadDataGrid_GroupHeaderTemplate;
                xamlMember.Setter = set_35_RadDataGrid_GroupHeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderTemplateSelector":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GroupHeaderTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_RadDataGrid_GroupHeaderTemplateSelector;
                xamlMember.Setter = set_36_RadDataGrid_GroupHeaderTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderStyle":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GroupHeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_RadDataGrid_GroupHeaderStyle;
                xamlMember.Setter = set_37_RadDataGrid_GroupHeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderStyleSelector":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "GroupHeaderStyleSelector", "Windows.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_RadDataGrid_GroupHeaderStyleSelector;
                xamlMember.Setter = set_38_RadDataGrid_GroupHeaderStyleSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.Commands":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "Commands", "Telerik.UI.Xaml.Controls.Grid.Commands.CommandCollection");
                xamlMember.Getter = get_39_RadDataGrid_Commands;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand.Id":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.Commands.DataGridCommand");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "Id", "Telerik.UI.Xaml.Controls.Grid.Commands.CommandId");
                xamlMember.Getter = get_40_DataGridCommand_Id;
                xamlMember.Setter = set_40_DataGridCommand_Id;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>.Owner":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "Owner", "Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember.Getter = get_41_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.RowHeight":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "RowHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_RadDataGrid_RowHeight;
                xamlMember.Setter = set_42_RadDataGrid_RowHeight;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.CommandService":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "CommandService", "Telerik.UI.Xaml.Controls.Grid.Commands.CommandService");
                xamlMember.Getter = get_43_RadDataGrid_CommandService;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.DragBehavior":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "DragBehavior", "Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_RadDataGrid_DragBehavior;
                xamlMember.Setter = set_44_RadDataGrid_DragBehavior;
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_45_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlSystemBaseType
    {
        global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ChocoDemo.ChocoDemo_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


